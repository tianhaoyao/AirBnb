/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author pthak
 */
public class SearchListings extends javax.swing.JFrame {

    /**
     * Creates new form SearchListings
     */
    public SearchListings() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchOptions = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cityField = new javax.swing.JTextField();
        searchButtonAddress = new javax.swing.JButton();
        tableDisplay5 = new javax.swing.JScrollPane();
        listTableAddress = new javax.swing.JTable();
        codeField = new javax.swing.JTextField();
        countryField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addressBox = new javax.swing.JComboBox<>();
        cityBox = new javax.swing.JCheckBox();
        codeBox = new javax.swing.JCheckBox();
        countryBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        latSearch = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        longSearch = new javax.swing.JTextField();
        distanceSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        rangeSlider = new javax.swing.JTextField();
        tableDisplay6 = new javax.swing.JScrollPane();
        distanceTable = new javax.swing.JTable();
        priceBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        priceLower = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        priceUpper = new javax.swing.JTextField();
        priceSearch = new javax.swing.JButton();
        tableDisplay7 = new javax.swing.JScrollPane();
        priceTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        dateSearch = new javax.swing.JButton();
        lowerDate = new javax.swing.JTextField();
        tableDisplay8 = new javax.swing.JScrollPane();
        ratingTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        upperDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchOptions.setBackground(new java.awt.Color(204, 204, 255));
        searchOptions.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("City");
        jLabel2.setToolTipText("");

        cityField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityFieldActionPerformed(evt);
            }
        });

        searchButtonAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButtonAddress.setText("Search");
        searchButtonAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonAddressActionPerformed(evt);
            }
        });

        listTableAddress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "List id", "Name", "City", "Postal code", "Country", "Description", "Lat", "Long", "Amenities", "Rent"
            }
        ));
        tableDisplay5.setViewportView(listTableAddress);

        codeField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        countryField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Postal Code");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Country");

        addressBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Postal Code", "City ", "Country ", "Full Address" }));
        addressBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressBoxActionPerformed(evt);
            }
        });

        cityBox.setText("include");
        cityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityBoxActionPerformed(evt);
            }
        });

        codeBox.setText("include");

        countryBox.setText("include");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableDisplay5, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(addressBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityBox)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(codeBox))
                                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(countryBox)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(countryField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(searchButtonAddress)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButtonAddress)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityBox)
                    .addComponent(codeBox)
                    .addComponent(countryBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(tableDisplay5, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchOptions.addTab("Search by address", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Latitude:");

        latSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Longitude:");

        longSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        distanceSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        distanceSearch.setText("Search");
        distanceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceSearchActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Range radius:");

        rangeSlider.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rangeSlider.setText("10");
        rangeSlider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeSliderActionPerformed(evt);
            }
        });

        distanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "List id", "Name", "City", "Postal code", "Country", "Description", "Lat", "Long", "Amenities", "Rent", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableDisplay6.setViewportView(distanceTable);

        priceBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        priceBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Asc\t", "Desc" }));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Sort by price");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(latSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(longSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(distanceSearch))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableDisplay6)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(latSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(longSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(rangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceSearch)
                    .addComponent(priceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(tableDisplay6, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchOptions.addTab("Search by distance ", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Price ($) between:");

        priceLower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("and");

        priceUpper.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        priceSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        priceSearch.setText("Search");
        priceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchActionPerformed(evt);
            }
        });

        priceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "List id", "Name", "City", "Postal code", "Country", "Description", "Lat", "Long", "Amenities", "Rent"
            }
        ));
        tableDisplay7.setViewportView(priceTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceLower, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceUpper, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceSearch)
                .addContainerGap(311, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(tableDisplay7, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(priceLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(priceUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceSearch))
                .addContainerGap(422, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(107, Short.MAX_VALUE)
                    .addComponent(tableDisplay7, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(30, Short.MAX_VALUE)))
        );

        searchOptions.addTab("Search by price", jPanel4);

        jPanel5.setBackground(new java.awt.Color(204, 255, 204));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Select Range(yyyy/mm/dd): ");

        dateSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateSearch.setText("Search");
        dateSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateSearchActionPerformed(evt);
            }
        });

        lowerDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lowerDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerDateActionPerformed(evt);
            }
        });

        ratingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "List id", "Name", "City", "Postal code", "Country", "Description", "Lat", "Long", "Amenities", "Rent"
            }
        ));
        tableDisplay8.setViewportView(ratingTable);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("to");

        upperDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        upperDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(lowerDate, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(upperDate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dateSearch)
                .addContainerGap(245, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableDisplay8)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(dateSearch)
                    .addComponent(lowerDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(upperDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tableDisplay8, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        searchOptions.addTab("Search by Date", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchOptions)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchOptions)
        );

        searchOptions.getAccessibleContext().setAccessibleName("Search by name");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void upperDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_upperDateActionPerformed

    private void lowerDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lowerDateActionPerformed

    private void dateSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateSearchActionPerformed

        DefaultTableModel model ;
        model = (DefaultTableModel)ratingTable.getModel();
        model.setRowCount(0);

        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
            }

            // setup connection
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/my_bnb?useSSL=false","root","rootpassword");

            PreparedStatement ps = conn.prepareStatement("SELECT DISTINCT listings_list_id,listing_dates from listing_dates WHERE listing_dates >= ? AND listing_dates <= ?");
            ps.setString(1,lowerDate.getText());
            ps.setString(2,upperDate.getText());
            String oldQuery = (ps.toString().substring(49));
            System.out.println(oldQuery);
            System.out.println("listing search works");
            Statement s = conn.createStatement();
            ResultSet rs = s.executeQuery("SELECT DISTINCT listings.list_id,listings.list_name, listings.city,listings.postal_code,listings.country, listings.description,listings.latitude,listings.longitude,listings.amenities,listings.rent_amount FROM listings L1,(" + oldQuery +") L2 INNER JOIN listings ON listings.list_id = L2.listings_list_id");
            model.setRowCount(1);
            int rowIndex = 0;
            while (rs.next() && rowIndex < model.getRowCount()) {

                model.insertRow(rowIndex,
                    new Object [] {rs.getString("list_id"),rs.getString("list_name"),
                        rs.getString("city"),rs.getString("postal_code"),rs.getString("country"),rs.getString("description"),rs.getString("latitude"),rs.getString("longitude"),rs.getString("amenities"),rs.getString("rent_amount")});
                rowIndex++;
            }

        } catch (SQLException e) {
            System.out.println("error");
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_dateSearchActionPerformed

    private void priceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model ;
        model = (DefaultTableModel)priceTable.getModel();
        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
            }

            // setup connection
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/my_bnb?useSSL=false","root","rootpassword");

            PreparedStatement ps = conn.prepareStatement("SELECT DISTINCT listings_list_id,rent_amount from listing_dates WHERE rent_amount BETWEEN (?) AND (?)");
            ps.setString(1,priceLower.getText());
            ps.setString(2,priceUpper.getText());
            String oldQuery = (ps.toString().substring(49));

            System.out.println("listing search works");
            Statement s = conn.createStatement();
            ResultSet rs = s.executeQuery("SELECT DISTINCT listings.list_id,listings.list_name, listings.list_address, listings.description,listings.latitude,listings.longitude,listings.amenities,rent_amount FROM listings L1,(" + oldQuery +") L2 INNER JOIN listings ON listings.list_id = L2.listings_list_id");
            int rowIndex = 0;
            while (rs.next() && rowIndex < model.getRowCount()) {
                System.out.println(rs.getString("list_address"));
                model.insertRow(rowIndex,
                    new Object [] {rs.getString("list_id"),rs.getString("list_name"),
                        rs.getString("city"),rs.getString("postal_code"),rs.getString("country"),rs.getString("description"),rs.getString("latitude"),rs.getString("longitude"),rs.getString("amenities"),rs.getString("rent_amount")});
                rowIndex++;
            }

        } catch (SQLException e) {
            System.out.println("error");
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_priceSearchActionPerformed

    private void rangeSliderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeSliderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rangeSliderActionPerformed

    private void distanceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceSearchActionPerformed
        // TODO add your handling code here:

        double lat = Double.parseDouble(latSearch.getText());
        double lon = Double.parseDouble(longSearch.getText());

        DefaultTableModel model ;
        model = (DefaultTableModel)distanceTable.getModel();
        model.setRowCount(0);

        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
            }

            // setup connection
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/my_bnb?useSSL=false","root","rootpassword");

            Statement s = conn.createStatement();
            ResultSet rs;
            if(priceBox.getSelectedIndex() == 0) {
                rs = s.executeQuery("SELECT * from listings");
            } else if (priceBox.getSelectedIndex() == 1) {
                rs = s.executeQuery("SELECT * from listings ORDER BY rent_amount ASC");
            } else {
                rs = s.executeQuery("SELECT * from listings ORDER BY rent_amount DESC");
            }

            model.setRowCount(1);
            System.out.println("listing search works");
            int rowIndex = 0;
            while(rs.next() && rowIndex < model.getRowCount()) {
                double tmpLat = Double.parseDouble(rs.getString("latitude"));
                double tmpLong = Double.parseDouble(rs.getString("longitude"));
                double distance = Math.sqrt(Math.pow(lat-tmpLat,2) + Math.pow(lon-tmpLong,2));
                String d = String.format("%.2f", distance);
                if(distance <= Double.parseDouble(rangeSlider.getText())) {
                    model.insertRow(rowIndex,
                        new Object [] {rs.getString("list_id"),rs.getString("list_name"),
                            rs.getString("city"),rs.getString("postal_code"),rs.getString("country"),rs.getString("description"),rs.getString("latitude"),rs.getString("longitude"),rs.getString("amenities"),rs.getString("rent_amount"),Double.parseDouble(d)});
                    rowIndex++;
                }
                distanceTable.setAutoCreateRowSorter(true);
            }
            //TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(distanceTable.getModel());
            // distanceTable.setRowSorter(sorter);

            /*
            int rowIndex = 0;
            // inserting into table
            while (rs.next() && rowIndex < model.getRowCount()) {
                System.out.println(rs.getString("list_address"));
                model.insertRow(rowIndex,
                    new Object [] {rs.getString("list_id"),rs.getString("list_name"),
                        rs.getString("list_address"),rs.getString("description"),rs.getString("latitude"),rs.getString("longitude"),rs.getString("amenities")});
                rowIndex++;
            }
            */

        } catch (SQLException e) {
            System.out.println("error");
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_distanceSearchActionPerformed

    private void searchButtonAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonAddressActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model ;
        model = (DefaultTableModel)listTableAddress.getModel();
        model.setRowCount(0);
        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
            }

            // setup connection
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/my_bnb?useSSL=false","root","rootpassword");

            PreparedStatement ps = null ;
            String condition = null;
            if(addressBox.getSelectedIndex() == 0) {
                ps = conn.prepareStatement("SELECT * from listings WHERE postal_code LIKE (?)");
                condition = codeField.getText() + "%";
                ps.setString(1,condition);

            } else if(addressBox.getSelectedIndex() == 1) {
                ps = conn.prepareStatement("SELECT * from listings WHERE city = ?");
                condition = cityField.getText();
                ps.setString(1,condition);

            } else if (addressBox.getSelectedIndex() == 2) {
                ps = conn.prepareStatement("SELECT * from listings WHERE country =?");
                condition = countryField.getText();
                ps.setString(1,condition);

            } else {
                ps = conn.prepareStatement("SELECT * from listings WHERE postal_code=(?) AND city =(?) AND country=(?)");
                ps.setString(1,codeField.getText());
                ps.setString(2,cityField.getText());
                ps.setString(3,countryField.getText());

            }

            model.setRowCount(1);
            ResultSet rs = ps.executeQuery();
            System.out.println("listing search works");

            int rowIndex = 0;
            while (rs.next() && rowIndex < model.getRowCount()) {

                model.insertRow(rowIndex,
                    new Object [] {rs.getString("list_id"),rs.getString("list_name"),
                        rs.getString("city"),rs.getString("postal_code"),rs.getString("country"),rs.getString("description"),rs.getString("latitude"),rs.getString("longitude"),rs.getString("amenities"),rs.getString("rent_amount")});
                rowIndex++;
            }

        } catch (SQLException e) {
            System.out.println("error");
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_searchButtonAddressActionPerformed

    private void cityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityFieldActionPerformed

    private void addressBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressBoxActionPerformed

    private void cityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchListings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchListings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchListings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchListings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchListings().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> addressBox;
    private javax.swing.JCheckBox cityBox;
    private javax.swing.JTextField cityField;
    private javax.swing.JCheckBox codeBox;
    private javax.swing.JTextField codeField;
    private javax.swing.JCheckBox countryBox;
    private javax.swing.JTextField countryField;
    private javax.swing.JButton dateSearch;
    private javax.swing.JButton distanceSearch;
    private javax.swing.JTable distanceTable;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField latSearch;
    private javax.swing.JTable listTableAddress;
    private javax.swing.JTextField longSearch;
    private javax.swing.JTextField lowerDate;
    private javax.swing.JComboBox<String> priceBox;
    private javax.swing.JTextField priceLower;
    private javax.swing.JButton priceSearch;
    private javax.swing.JTable priceTable;
    private javax.swing.JTextField priceUpper;
    private javax.swing.JTextField rangeSlider;
    private javax.swing.JTable ratingTable;
    private javax.swing.JButton searchButtonAddress;
    private javax.swing.JTabbedPane searchOptions;
    private javax.swing.JScrollPane tableDisplay5;
    private javax.swing.JScrollPane tableDisplay6;
    private javax.swing.JScrollPane tableDisplay7;
    private javax.swing.JScrollPane tableDisplay8;
    private javax.swing.JTextField upperDate;
    // End of variables declaration//GEN-END:variables
}
